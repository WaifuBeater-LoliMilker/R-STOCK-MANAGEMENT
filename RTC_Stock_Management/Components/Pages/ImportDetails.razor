@page "/import-details"
@using System.Linq
@using Microsoft.AspNetCore.Components.Forms
@using RTC_Stock_Management.Services
@inject NavigationManager Nav
@inject IJSRuntime JS
@implements IDisposable

<div class="d-flex flex-column align-items-center justify-content-center gap-3 h-100 px-3 pt-3">
    <div class="header-area" style="height: 54px;" />
    <button class="btn btn-back" style="font-weight:bolder;font-size:22px;" @onclick="GoBack">←</button>
    <h1 class="text-center" tabindex="-1" style="font-size:20px;z-index:999">@packingcode</h1>
    <div class="input-group w-100">
        <input id="location" class="form-control" @ref="locationInput"
               placeholder="Nhập vị trí..." @bind="location" @bind:event="oninput" @onkeyup="OnKeyUp"
               aria-label="Filter rows by name" />
        <label for="location" class="input-group-text focus-ring focus-ring-primary" @onclick="OnSaveData">➤</label>
    </div>
    <div class="w-100 flex-grow-1 d-flex" style="min-height:0px;">
        <div class="scrollable-table border rounded flex-fill">
            <table class="table table-hover table-striped table-bordered border-primary mb-0">
                <colgroup>
                    <col style="width:40px" />
                    <col style="width:50px" />
                    <col />
                    <col style="width:100px" />
                </colgroup>
                <thead class="table-light text-center align-middle">
                    <tr>
                        <th style="width:40px" class="text-center"></th>
                        <th style="width:50px" class="text-center">STT</th>
                        <th>Serial</th>
                        <th style="width:100px" class="text-center">Vị trí</th>
                    </tr>
                </thead>
                <tbody>
                    @if (materialtype == 2)
                    {
                        <tr><td colspan="4" class="text-center py-4">Serial không khả dụng cho hàng loại bé</td></tr>
                    }
                    else if (!rows.Any())
                    {
                        <tr><td colspan="4" class="text-center py-4">Không có dữ liệu</td></tr>
                    }
                    else
                    {
                        @foreach (var row in rows)
                        {
                            <tr>
                                <td class="text-center align-middle">
                                    <InputCheckbox @bind-value="row.IsChecked" @oninput="() => OnCheckboxChanged(row)" />
                                </td>
                                <td class="text-center align-middle">@row.STT</td>
                                <td class="overflow-breakword align-middle">@row.Serial</td>
                                <td class="overflow-ellipsis align-middle">@row.Location</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div style="height:8px"></div>
</div>
<script src="js/home.js"></script>
@code {
    //private IDisposable? locationChangedHandler;

    [Parameter]
    [SupplyParameterFromQuery(Name = "packing-code")]
    public string? packingcode { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "warehouse-code")]
    public string? warehousecode { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "material-type")]
    public int materialtype { get; set; }

    private string? location { get; set; }
    private ElementReference locationInput;
    protected override void OnParametersSet() { }

    class Row
    {
        public bool IsChecked { get; set; } = true;
        public int STT { get; set; }
        public string Location { get; set; } = "";
        public string Serial { get; set; } = "";
    }

    private List<Row> rows = new();

    protected override async Task OnInitializedAsync()
    {
        //locationChangedHandler = Nav.RegisterLocationChangingHandler(OnLocationChanging);
        await LoadData();
    }
    public void Dispose()
    {
        //locationChangedHandler?.Dispose();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("setFocus", locationInput);
            }
            catch (Exception ex)
            { }
        }
    }
    private void GoBack()
    {
        Nav.NavigateTo($"/import?warehouse-code={warehousecode}");
    }

    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await OnSaveData();
            await JS.InvokeVoidAsync("selectAllText", locationInput);
        }
    }
    private async Task LoadData()
    {
        var service = DependencyService.Get<ImportWarehouseService>();
        var alert = DependencyService.Get<AlertService>();
        try
        {
            if (packingcode == null) return;
            await JS.InvokeVoidAsync("toggleLoading", true);
            var data = await service.GetSerials(packingcode);
            if (data == null)
            {
                await JS.InvokeVoidAsync("showToast", "error", "Thông báo", "Load dữ liệu thất bại");
            }
            else
            {
                rows.Clear();
                for (int i = 1; i <= data.Count; i++)
                {
                    rows.Add(new Row
                    {
                        IsChecked = true,
                        STT = i,
                        Location = data[i - 1].Location,
                        Serial = data[i - 1].SerialNumber,
                    });
                }
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("showToast", "error", "Thông báo", "Load dữ liệu thất bại");
        }
        finally
        {
            await JS.InvokeVoidAsync("toggleLoading", false);
        }
    }
    private void OnCheckboxChanged(Row row)
    {
        row.IsChecked = !row.IsChecked;
        if (!row.IsChecked) row.Location = "";
        else row.Location = location ?? "";
    }
    private async Task OnSaveData()
    {
        var service = DependencyService.Get<ImportWarehouseService>();
        var alert = DependencyService.Get<AlertService>();
        foreach (var row in rows)
        {
            if (row.IsChecked) row.Location = location ?? "";
        }
        var serialItems = rows.Select(r => new ImportSerialItem { SerialNumber = r.Serial, Location = r.Location }).ToList();
        var result = await service.UpdateSerials(packingcode ?? "", serialItems, materialtype, location ?? "");
        if (result) await JS.InvokeVoidAsync("showToast", "success", "Thông báo", "Cập nhật thành công");
        else await JS.InvokeVoidAsync("showToast", "error", "Thông báo", "Cập nhật  thất bại");
    }
}