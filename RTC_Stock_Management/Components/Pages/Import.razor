@page "/import"
@using System.Linq
@using Microsoft.AspNetCore.Components.Forms
@using RTC_Stock_Management.Services
@inject NavigationManager Nav
@inject IJSRuntime JS

<div class="d-flex flex-column align-items-center justify-content-center gap-3 h-100 px-3 pt-3">
    <div class="header-area" style="height: 65px;" />
    <button class="btn btn-back" style="font-weight:bolder;font-size:22px;" @onclick="GoBack">←</button>
    <h1 class="text-center" tabindex="-1" style="z-index:999">Nhập kho</h1>
    <div class="input-group w-100">
        <input id="code" class="form-control" @ref="codeInput"
               placeholder="Nhập mã..." @bind="warehouseCode" @bind:event="oninput" @onkeyup="OnKeyUp" />
        <label for="code" class="input-group-text focus-ring focus-ring-primary" @onclick="LoadData">➤</label>
    </div>
    <div class="input-group w-100">
        <input id="search" class="form-control" @ref="searchInput"
               placeholder="Tìm kiếm..." @bind="searchTerm" @bind:event="oninput" @onkeyup="OnSearch" />
        <label for="code" class="input-group-text focus-ring focus-ring-primary">🔎</label>
    </div>
    <div class="w-100 flex-grow-1 d-flex" style="min-height:0px;">
        <div class="scrollable-table border rounded flex-fill">
            <table class="table table-hover table-striped table-bordered border-primary mb-0">
                <thead class="table-light text-center align-middle">
                    <tr>
                        <th style="width:50px" class="text-center">STT</th>
                        <th>Packing code</th>
                        <th style="width:100px" class="text-center">Vị trí</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!filtered.Any())
                    {
                        <tr><td colspan="3" class="text-center py-4">Không có dữ liệu</td></tr>
                    }
                    else
                    {
                        @foreach (var item in filtered)
                        {
                            <tr>
                                <td class="text-center align-middle">@item.STT</td>
                                <td>
                                    <NavLink href="@($"import-details?packing-code={item.PackingCode}&warehouse-code={warehouseCode}&material-type={item.MaterialType}")"
                                             class="nav-link overflow-breakword align-middle" draggable="false">
                                        @item.PackingCode
                                    </NavLink>
                                </td>
                                <td class="overflow-ellipsis align-middle"> @item.Location</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div style="height:8px"></div>
</div>
@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "warehouse-code")]
    public string? warehouseCode { get; set; }
    public string searchTerm { get; set; } = "";
    private ElementReference codeInput;
    private ElementReference searchInput;

    class Row
    {
        public int STT { get; init; }
        public string Location { get; init; } = "";
        public string PackingCode { get; init; } = "";
        public int MaterialType { get; set; } = 1;
    }

    private List<Row> rows = new();
    private List<Row> filtered = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", codeInput);
        }
    }
    private async Task OnKeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Key == "Enter" || e.Code == "NumpadEnter")
        {
            await LoadData();
            await JS.InvokeVoidAsync("setFocus", searchInput);
        }
    }
    private async Task OnSearch(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Key == "Enter" || e.Code == "NumpadEnter")
        {
            filtered = string.IsNullOrWhiteSpace(searchTerm)
            ? rows
            : rows.Where(r => r.PackingCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            await JS.InvokeVoidAsync("setFocus", searchInput);
            await JS.InvokeVoidAsync("selectAllText", searchInput);
        }
    }
    private async Task LoadData()
    {
        var service = DependencyService.Get<ImportWarehouseService>();
        var alert = DependencyService.Get<AlertService>();
        try
        {
            if (warehouseCode == null) return;
            await JS.InvokeVoidAsync("toggleLoading", true);
            var data = await service.GetPackingCode(warehouseCode);
            if (data == null)
            {
                await JS.InvokeVoidAsync("showToast", "error", "Thông báo", "Load dữ liệu thất bại");
            }
            else
            {
                rows.Clear();
                for (int i = 1; i <= data.Count; i++)
                {
                    rows.Add(new Row
                    {
                        STT = i,
                        Location = data[i - 1].Location,
                        PackingCode = data[i - 1].PackingCode,
                        MaterialType = data[i - 1].MaterialType,
                    });
                }
                filtered = rows;
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("showToast", "error", "Thông báo", "Load dữ liệu thất bại");
        }
        finally
        {
            await JS.InvokeVoidAsync("toggleLoading", false);
        }
    }
    private void GoBack()
    {
        Nav.NavigateTo($"/");
    }
}
