@page "/"
@using System.Linq
@inject IJSRuntime JS

<div class="d-flex flex-column align-items-center justify-content-center gap-3 h-100 px-3 pt-3">
    <h1 class="text-center" tabindex="-1">Nhập kho</h1>
    <div class="input-group w-75">
        <input id="code" class="form-control" @ref="codeInput"
               placeholder="Nhập mã..." @bind="searchTerm"
               aria-label="Filter rows by name" />
        <label for="code" class="input-group-text focus-ring focus-ring-primary">➤</label>
    </div>
    <div class="w-100 flex-grow-1 d-flex">
        <div class="scrollable-table border rounded flex-fill">
            <table class="table table-hover table-striped table-bordered border-primary mb-0">
                <thead class="table-light">
                    <tr>
                        <th style="width:80px">STT</th>
                        <th>Packing code</th>
                        <th>Vị trí</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!FilteredItems.Any())
                    {
                        <tr><td colspan="3" class="text-center py-4">No matching rows</td></tr>
                    }
                    else
                    {
                        @foreach (var item in FilteredItems)
                        {
                            <tr>
                                <td class="text-center">@item.STT</td>
                                <td>
                                    <NavLink href="@($"details/{item.STT}")" class="nav-link" draggable="false">
                                        @item.PackingCode
                                    </NavLink>
                                </td>
                                <td> @item.Location</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<script src="js/home.js"></script>
@code {
    private string searchTerm = "";

    class Row
    {
        public int STT { get; init; }
        public string Location { get; init; } = "";
        public string PackingCode { get; init; } = "";
    }

    private List<Row> rows = new();

    private IEnumerable<Row> FilteredItems =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? rows
            : rows.Where(r => r.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                           || r.PackingCode.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override void OnInitialized()
    {
        for (int i = 1; i <= 30; i++)
        {
            rows.Add(new Row
            {
                STT = i,
                Location = $"Item {i}",
                PackingCode = $"Packing code {i}."
            });
        }
    }
    private ElementReference codeInput;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", codeInput);
        }
    }
}
